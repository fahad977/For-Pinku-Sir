package compailer;

import java.io.File;
import java.util.ArrayList;
import java.util.ArrayList;
import java.util.Scanner;

public class JavaApps2 {
    
    

    public static void main(String[] args) {

        ArrayList<String> strLi = new ArrayList<>();

       
           Scanner sc=new Scanner(System.in);
           String st=sc.nextLine();
  
                String[] temp = st.split(" ");
                for (int i=0;i<temp.length;i++) {
                    strLi.add(temp[i]);
                }
            
        

        ArrayList<String> Keywords = new ArrayList<>();
        ArrayList<String> Ar_Operator = new ArrayList<>();
        ArrayList<String> Inc_Dec = new ArrayList<>();
        ArrayList<String> Asgnmnt_Operator = new ArrayList<>();
        ArrayList<String> rltn_operator = new ArrayList<>();
        ArrayList<String> logical_Oprtr = new ArrayList<>();
        ArrayList<String> bitwise_oprtr = new ArrayList<>();
        ArrayList<String> Others = new ArrayList<>();

        //keyword
        Keywords.add("auto");
        Keywords.add("break");
        Keywords.add("case");
        Keywords.add("char");
        Keywords.add("const");
        Keywords.add("continue");
        Keywords.add("default");
        Keywords.add("do");
        Keywords.add("double");
        Keywords.add("else");
        Keywords.add("enum");
        Keywords.add("extern");
        Keywords.add("float");
        Keywords.add("for");
        Keywords.add("goto");
        Keywords.add("if");
        Keywords.add("int");
        Keywords.add("long");
        Keywords.add("register");
        Keywords.add("return");
        Keywords.add("short");
        Keywords.add("signed");
        Keywords.add("sizeof");
        Keywords.add("static");
        Keywords.add("struct");
        Keywords.add("switch");
        Keywords.add("typedef");
        Keywords.add("union");
        Keywords.add("unsigned");
        Keywords.add("void");
        Keywords.add("volatile");
        Keywords.add("while");

        //Arithmetic
        Ar_Operator.add("+");
        Ar_Operator.add("-");
        Ar_Operator.add("*");
        Ar_Operator.add("/");
        Ar_Operator.add("%");

        //Increment_Decrement
        Inc_Dec.add("++");
        Inc_Dec.add("--");

        //others...
        Others.add("(");
        Others.add(")");
        Others.add("{");
        Others.add("}");
        Others.add("[");
        Others.add("]");
        Others.add(",");
        Others.add("'");
        Others.add("@");
        Others.add("#");
        Others.add("$");
        Others.add("^");
        Others.add("_");
        Others.add("-");
        Others.add("/");
        Others.add("?");
        Others.add(":");
        Others.add(";");
        Others.add("\"");
        Others.add(".");

        //Assignment
        Asgnmnt_Operator.add("=");
        Asgnmnt_Operator.add("+=");
        Asgnmnt_Operator.add("-=");
        Asgnmnt_Operator.add("*=");
        Asgnmnt_Operator.add("/=");
        Asgnmnt_Operator.add("%=");

        //Relational Operator
        rltn_operator.add("==");
        rltn_operator.add("<=");
        rltn_operator.add(">=");
        rltn_operator.add(">");
        rltn_operator.add("<");
        rltn_operator.add("!=");

        //logical_Oprtr
        logical_Oprtr.add("&&");
        logical_Oprtr.add("||");
        logical_Oprtr.add("!");

        //bitwise_oprtr
        bitwise_oprtr.add("&");
        bitwise_oprtr.add("|");
        bitwise_oprtr.add("^");
        bitwise_oprtr.add("-");
        bitwise_oprtr.add(">>");
        bitwise_oprtr.add("<<");

        ArrayList<String> key = new ArrayList<>();
        ArrayList<String> id = new ArrayList<>();
        ArrayList<String> arithmetic = new ArrayList<>();
        ArrayList<String> increment = new ArrayList<>();
        ArrayList<String> assignment = new ArrayList<>();
        ArrayList<String> relational = new ArrayList<>();
        ArrayList<String> logical = new ArrayList<>();
        ArrayList<String> bitwise = new ArrayList<>();
        ArrayList<String> number = new ArrayList<>();
        ArrayList<String> other = new ArrayList<>();

        for (String i : strLi) {

            if (Keywords.contains(i)) {
                key.add(i);
            } else if (Ar_Operator.contains(i)) {
                arithmetic.add(i);
            } else if (Inc_Dec.contains(i)) {
                increment.add(i);
            } else if (Asgnmnt_Operator.contains(i)) {
                assignment.add(i);
            } else if (rltn_operator.contains(i)) {
                relational.add(i);
            } else if (logical_Oprtr.contains(i)) {
                logical.add(i);
            } else if (bitwise_oprtr.contains(i)) {
                bitwise.add(i);
            } else if (checkNumber(i)) {
                number.add(i);
            } else if (Others.contains(i)) {
                other.add(i);
            } else {
                id.add(i);
            }

        }

        System.out.println("Keyword: \n" + key);

        System.out.println("Identifiers: \n" + id);

        System.out.println("Arithmetic Operators:");
        System.out.println(arithmetic);

        System.out.println("Assignment Operators:");
        System.out.println(assignment);

        System.out.println("Bit Wise Operators:");
        System.out.println(bitwise);

        System.out.println("Increment Decrement Operators:");
        System.out.println(increment);

        System.out.println("Logical Operator:");
        System.out.println(logical);

        System.out.println("Relational Operator:");
        System.out.println(relational);

        System.out.println("Numarical Value:");
        System.out.println(number);

        System.out.println("Others:");
        System.out.println(other);

    }

    static boolean checkNumber(String s) {
        try {
            int x = Integer.parseInt(s);

        } catch (Exception e) {

            return false;
        }

        return true;

    }

}
